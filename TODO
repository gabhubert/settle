# mint

 [ ] pass DSN for DB, support Postgres
 [ ] expose expiry of transactions?
 [x] transaction expiration
 [x] async proceses
 [x] propagation protocol for both operations and offers
 [x] idempotency of propagation (load offer/operation and save if they exist and return 200)
 [x] validate asset is created when creating offer and test
 [x] figure out when to set the offer as consumed (multiple crossings might be reserved)
 [x] remove user from records entirely?
 [x] remove the ability to create an operation directly?
 [x] transaction starting from an asset not owned by owner
 [x] janitorial work on test extractions (assert instead of fatal)
 [x] enforce we handle hops in order (we handle them all)
 [x] enforce the hops belong to the right mint
 [x] secure concurrent transaction settlement
 [x] secure concurrent transaction creation and settlement
 [x] transaction settlement
 [x] transaction locks
 [x] transaction creation
 [x] replace 1000*1000 by protocol constant
 [x] log prefix (mint)
 [x] make user optional for propagated transactions (or other objects)
 [x] move status values to protocol
 [x] move Execute to ctx
 [x] remove nil from creation operation, prevent issuer from owning balance
 [x] rename Normalized something Address to Owner
 [x] split controller into endpoint.CreateXXX object with Execute and Validate
 [x] move mint host to context

  # test

    [ ] test that consumes an offer entirely (check status)
    [~] transaction tests with misbehaving mint
    [x] test async offer/operation propagation
    [x] operation propagation
    [x] offer propagation
    [x] concurrent call to transaction settlement attack test
    [x] test settlement with erroneous secret
    [x] concurrent call to transaction creation attack test
    [x] test transaction that uses the same user twice
    [x] test transaction that uses more than what is left on an offer
    [x] make the DB a context value that can be created independently for tests
    [x] find a way to set the MintHost after start or set the mux after creating the httptest.Server
    [x] support in memory db

  # async processes

    [x] offer propagation
    [x] operation propagation
    [x] transaction expiry

# site

  [ ] have the get started guide on github, to generate stars?

# notes

  # offers and operations

  - the canonical mint has the truth so no need for a 2 step commit or blocking
    on other mints, just rely on best effort propagation (hence protocol
    necessarily different from transactions)
  - mints are eventually consistent on operations and offers
  - propagation happens asynchronously and can be triggered by clients
  - POST /operations/:op unauthenticated

  # async

  - operation types: operation, offer propagation; transaction cancelation
  - async.Queue(t Task)
  - Task is an interface backed by storage in the mint DB
     Execute() error
     Type() TkType

  # transactions

  - Transactions reservation have only impact on the balance of the originating
    mint. They do also consume offer remainders, but are not blocking any
    funds.

# contact r?

  dm
  gdb
  rauchg
  https://blog.filippo.io/giving-up-on-long-term-pgp/
